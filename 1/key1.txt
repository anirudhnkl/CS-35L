Exercise 1.1:

1.
2. C-s H T M L Enter
3. C-s s c a v e n g e r Enter M-b
4. C-s s e l f - r e f Enter M-b
5. C-s a r r o w Enter M-b
6. C-e
7. C-a
8. Yes, we can use the search C-s command and the M-b, M-f, C-a, C-e commands to move around quicker.
9. No, I used the commands stated above.
10. C-x C-c

Exercise 1.2:

1.
2. M-g M-g 1 8 Enter C-k
3. C-s D E L E T E Enter C-a C-k
4. C-s w i k i p e d C-s Enter C-a C-p C-k C-k C-k
5. C-s < ! - Enter C-b C-b C-b C-M-k C-s < ! - Enter C-b C-b C-b C-M-k C-s < ! - Enter C-b C-b C-b C-M-k

Exercise 1.3: 

1.
2. M-% A s s i g n m e n t 1 . Enter A s s i g n m e n t 2 1 . Enter sp sp
3. M-% U T F - 8 Enter U S - A S C I I Enter sp
4. M-% [ ^ [ : a s c i i : ] ] Enter Enter sp
5. M-< C-s < / o l > Enter C-e Enter

Exercise 1.4:

1.
2.
3. M-> C-r - < Right C-SP C-e M-w M-g M-g 393 C-y Enter
4. M-> C-r - < C-r C-r C-r RIGHT C-SP DOWN DOWN DOWN M-w M-g M-g 379 C-y Enter UP C-d UP C-d M-> C-r - < C-r C-r C-r C-r C-r RIGHT C-SP DOWN DOWN DOWN M-w M-g M-g 335 C-y Enter UP C-d UP C-d M-> C-r - < C-r C-r C-r C-r C-r C-r RIGHT C-SP DOWN LEFT LEFT M-w M-g M-g 123 C-y Enter M-> C-r - < C-r C-r C-r C-r C-r C-r RIGHT C-SP DOWN LEFT LEFT M-w M-g M-g 17 C-y Enter
5. M-> C-r e x e r 1 Enter C-a C-SP M-> C-w
6. C-x u
7. M-> - - > M-> C-r e x e r 1 Enter C-a < ! - -
8. M-< C-s < o l > C-s C-s C-s C-s C-s C-s C-s Enter I found 7 instances.
   M-< M-x r e p l a c e - s t r i n g Enter < o l > Enter < o L > Enter
9. 

Exercise 1.5:

1. M-! m k d i r SP ~ / j u n k Enter
2. C-x C-f j u n k / h e l l o . c Enter (copy code from website) M-! c d j u n k
3. M-x c o m p i l e Enter BACKSPACE BACKSPACE BACKSPACE BACKSPACE BACKSPACE BACKSPACE BACKSPACE BACKSPACE g c c SP - o SP h e l l o SP h e l l o . c Enter
4. C-x b h e l l o - o u t Enter C-u M-! . / h e l l o Enter
5. C-SP M-> M-w C-x C-f k e y 1 . t x t C-y
#include <stdio.h>
int
main (void)
{
  char n = '\n', b = '\\', q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn', b = '%c%c', q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, b, b, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, b, b, q, n, q, p, q, n, n, n, n);
  return 0;
}

Exercise 1.6:

1. C-x b Enter
2. ( r a n d o m " 0 0 4 - 9 0 6 - 5 1 7 ") C-j
   -989956441387835748
3. ( s e t q SP x SP ( r a n d o m ) ) C-j () ( s e t q SP y SP ( r a n d o m )
) C-j
x = 269271200029721331
y = 385455836841018298
4. ( * SP x SP y ) C-j
   I get -2273364978295374450, which is wrong because product of two positive numbers cannot be negative.
5. M-: ( * SP x SP y ) Enter
   The output is the same, but it also includes the octadecimal and hexadecimal values.
6. They are not truly random in the mathematical sense. Truly random numbers have infinite range that they could be within, but due to computing limitations these numbers have a finite range. Also, the numbers are generated in a random series, such that all the possible values in the range occur equally often in the series. These numbers are generated from a seed value and given a seed, the random function always generates the same sequence of numbers. Thus, this makes the numbers generated not truly random.

7.
The random numbers are all between the "most-negative-fixnum" = -2305843009213693952 and "most-positive-fixnum" = 2305843009213693951, which define the range for the numbers. This is also the range for numbers without causing overflow, which is the reason products are mathematically incorrect. The probability that the product is incorrect is if the product is not in the range. The probability for overflow with the random numbers is very high, close to 100% given our bounds and the generated random integers.
